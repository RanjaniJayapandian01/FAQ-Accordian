
node -v : to identify the node version v20.15.1. 
npm -v : node package manager version number 10.7.0. if not installed use https://nodejs.org/en to install current version. Node js is a package ecosystem name npm (node package manager).
It is a command line utility that interacts with repository of open source projects to install the libraries, packages.
npm install : to add node modules
npm install -g typescript : to install typescript
npm install -g @angular/cli : to install angular cli. angular cli version is 18.1.2. Angular CLI  is a command line interface tool that is used to create, build and deploy angular apps.
command 
ng -v : to get complete result of node, npm, angular version. ng version
ng new AngularDemo_01 : create a new angular project and skeleto application. 
                        ng - used ot call Angular CLI
                        new - creates a angular workspace and skeleton with multiple libraries
                        AngularDemo_01 - project name
cd foldername : to change path
ng serve or ng serve -o : to launches the server. Will automatically open the browser on http://localhost:4200/
npm start

src folder -  the app component, script , template, styles, images are stored.
main - entry point for the app. It cpmplies app with JIT compiler, bootstraps the application's root module
tsconfig.json - Typescript compiler configuration compile ts to json
angular.json - configure angular cli. set default or configure files to include when project is build
package.json - custom scripts are added, thrid party packages are listed. Contains dependencies, scripts, name, version.
node modules - folder created by Node.js and puts all the thrid party modules listed in package.json
tslint.json - used when running  ng lint. Linting helps keep your code style consistent.(automated checking of your source code for programmatic and stylistic errors.)
Readme.md - basic documentation of app
index.html - consist of selector to render the view  <app-root></app-root>

main.ts - like all other programs, angular has a main entry point of application. i.e main.ts . It contains below lines to start(bootstraps) the application.i.e AppModule
platformBrowserDynamic().bootstrapModule(AppModule, {
  ngZoneEventCoalescing: true
})

app.module.ts - is the root module explains how to assemble application.
module is a class decorated with @NgNodule decorator. Similarly modules and components have decorator that are added explicity to specify what they are.
@NgModule - is a function that takes four array variables
            declarations - which components, directives, pipes is related to this module. As we create new component, it will be added in this section
            imports      - what other module whose exported class has to be imported so that its feature can be imported in the current component classes. ex: BrowserModule (required for every browser app, contains common module, ngif, ngfor), AppRouting  
                             BrowserModule from @angular/platform-browser. Some other examples as FormsModule, HttpClientModule
            bootstrap    - tells which component has to executed when the application is launched. ex: AppComponent
            providers    - application wide services to use

Appmodule in turn makes call to AppComponent, which is a root component of the application and makes it ready to use.
  bootstrap: [AppComponent]

app.component.ts - Component - consist of three parameters. @Component decorator is used to identify that the particular class is component.
It is the basic building block for angular app.
selector - custom tag to render the html of the associated component.
templateUrl - contains path of the html file associated with current component
styleUrl - has the css file path to be applied for the html template.
a ts file whose class is decorated with @Component is called as Angular Component.
metadata - extra data defined for the angular class.{ parameter defined in @Component}
Template - view for the application created in html
            Inline Template - when the html is declared in the ts file 
            External Template - when html file is defined in seperate file and referred using templateurl property.
Class - code with properties and method used to support the view. defined in Type script.

export - make a class available/ accessible in other files
import - used to import features to the current file from external files where it will defined as export

import {BrowserModule} from '@angular/platform-browser';
import {NgModule} from '@angular/core';
import {Component} from '@angular/core';

Notes: 
watchmode- if typescript recomplies whenever the file changes is detected


Building components
Build Directives
Data Binding
Angular forms and validations
Read data using services
Routing
Modify data using servicesEnhance UI , pipe and styles


Structural Directive:
ngIf - <element *ngIf="boolean expression; else variable>{{}} </element>
        <ng-template #variable></ng-template>
ngfor - <element *ngFor="let p of list"> {{p.x}}</element>
ngSwitch - [ngSwitch]="value" <element *ngSwitchCase=""> <element *ngSwitchDefault>
ngswitchdefault can be placed anywhere in the switch and can be more than one

array.length - return total number of elements

Sending data to child component
@Input decorator is used to receive the parent class property value to the child class element.
The @Input() decorator in a child component or directive signifies that the property can receive its value from its parent component.
<childselector [target@Input in child]="src propertyin the parent selector / element"></childselector>

Pipes: 
Used to transform input data to desired output. Date, Currency, Lowercase, uppercase are some of the examples of pipes.
ex: {{ data.releasedDate | date}}



Events:
click, onkeyup, oncopy
https://www.w3docs.com/snippets/javascript/how-to-disable-text-selection-copy-cut-paste-and-right-click-on-a-web-page.html#example-8

form element is container different types of element  - text, radio, checkbox, submit
<form> <div class="form-group"> <input class="form-control" ..> </div> </form>

for - id works together, where for is added to the label element and the same value is mentioned in the input property id attribute.
<div class="form-group">
                <label for="country">Country</label>
                <select class="form-control" id="country" [(ngModel)]="model.country" name="country">
                    <option *ngFor="let c of countries" [value]="c"> {{c}}</option>
                </select>
</div>

ngmodel - name works together to perform two way data binding and register the control with the form.
If any control has ngModel it provides a way for Two way Binding between form and control, Also if track chnage state and validity of the control using ng css classes like
if user has touched the control, ng-touched = true ng-untouched = false
if the value of the control is changed, ng-dirty = true ng-pristine = false
if the value of the control is valid, ng-valid =true ng-invalid = false
These classes are used to avoid auto display of alerts even before the user enters values
use #variable="ngModel" in the input element / control and access the ng css classes using variable like variable.touched
example : 
 <div class="form-group">
                <label for="email">Email</label>
                <input type="text" class="form-control" id="email" required [(ngModel)]="model.email" name="email" #email="ngModel">
                <div class="alert alert-danger" *ngIf="email.touched && email.invalid">Email is Required</div>
</div> 

variable.errors.['minlength'] : html atribute like minlength, mavlength, required can alos be used with the form validation
example:
<div class="form-group">
                <label for="lastName">Last Name</label>
                <input type="text" class="form-control" id="lastName" required [(ngModel)]="model.lastName" name="lastName" #lastName="ngModel" minlength="2">
                <div *ngIf="lastName.touched && lastName.errors">
                    <div class="alert alert-danger" *ngIf="lastName?.errors?.['required']">Last Name is required</div>
                    <div class="alert alert-danger" *ngIf="lastName.errors?.['minlength']">Last Name should be minimum 2 characters</div>
                </div>
                
                <!-- <div class="alert alert-danger" *ngIf="lastName.touched && !lastName.valid">Last Name is Required</div> -->
            </div>

To control the entire form use (ngSubmit) ="method" like below
        <form (ngSubmit)="onSubmit()" #userForm="ngForm">

11.9.2024
Event Binding
syntax: (eventname)= "method($event)"
$event is the event object that hold event trigger information (InputEvent> taregt> value)
The data follows from html template to component class
example: excercise.component.ts
<div class="card-actions">
              <button class="btn" (click) = "plant.GenerateAdditionalInfo(plant.name)">More Info</button>
            </div>
    window.open(url, '_blank'); // Opens the URL in a new tab
    // or use `window.location.href = url;` to navigate in the same tab
GenerateAdditionalInfo(name:  string){
      if(name=='Lily')
      window.open('https://en.wikipedia.org/wiki/Lilium', '_blank');
      if(name =='Cactus')
        window.open('https://en.wikipedia.org/wiki/Cactus', '_blank');

    }
15.09.2024
Model Driven Forms
Form Builder: It make use of library like Form Group, Form Control, Validators(if needed), ReactiveForms Module.
create a instance form group variable and include formcontrol parameters.
Use the same variable name to bind with the form element. [formGroup]="formgroupvariablename"
and formControl="form control parametername" . Make sure to verify the case because it is case sensitive.
For validation use form.controls.parametername.touched , valid, errors
Include (ngSubmit)="methodname" for submit
example : login

FormControl
Definition: Represents a single form field or input element.
Usage: Manages the value and validation state of an individual form input (like a text box or checkbox).
Example: You can create a FormControl for an email input like this:
typescript

emailControl = new FormControl('', Validators.required);
FormGroup
Definition: A collection of FormControls, essentially representing a group of related form fields.
Usage: Used to manage the state and validation of multiple form inputs as a single entity.
Example: You can create a FormGroup for a login form that includes both email and password controls:
typescript

loginForm = new FormGroup({
  email: new FormControl('', Validators.required),
  password: new FormControl('', Validators.required),
});
FormBuilder
Definition: A service that simplifies the creation of FormGroups and FormControls.
Usage: Provides a more concise way to build complex forms, making the code cleaner and more readable.
Example: Using FormBuilder to create the same login form:
typescript

constructor(private fb: FormBuilder) {}

loginForm = this.fb.group({
  email: ['', Validators.required],
  password: ['', Validators.required],
});


Custom Validators:
create methods to validate inputby passing form control as input parameter and evaluate the input values. The validation function returns
return null | return validatorMethod : value



Question:
1. we have used model.properties to access the class properties. what if there are multiple classes in the typescript file

03-10-2024
Spread Operator
The syntax [...this.cartItems] uses the spread operator in JavaScript (and TypeScript). Here’s what it does:

2. Why Use a Shallow Copy?
Preventing Side Effects: When you create a new array, any changes to that new array won’t affect the original array. This is particularly important in Angular, where changes to input properties may not trigger change detection if the reference does not change.
Immutability: By creating a new reference for the array, you can work with a more functional programming style, reducing potential side effects from mutations of shared state.

3. Use in Angular Components
In the context of your Angular application, using [...this.cartItems] is particularly useful for:
Updating State: When you update filteredCartItems in your CartComponent, using the spread operator ensures that it points to a new array reference. This triggers Angular's change detection to recognize that something has changed.
Input Properties: If you're passing cartItems as an input to another component and you modify the array, creating a new reference helps ensure that the changes are reflected correctly across your application.

const originalArray = [1, 2, 3];
const newArray = [...originalArray];

console.log(newArray); // Output: [1, 2, 3]
console.log(originalArray === newArray); // Output: false (they are different references)

destructuring array
obj : object
for(var item in Object.entries(obj))
  let[variable1, variable2]= item

How Structural directive works: angular identifies a directive is structural by the decorator * ex: *ngIf, *ngFor
when directive of this type identified , then angular will wrap up the element within this html element into the ng-template 
*ngIf ====

<ng-template [ngIf]="booleanexpression">

--- Test --
cloned repo on 011-11-2024 